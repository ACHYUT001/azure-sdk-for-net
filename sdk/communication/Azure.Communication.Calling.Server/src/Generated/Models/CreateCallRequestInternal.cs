// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Communication;

namespace Azure.Communication.Calling.Server
{
    /// <summary> The request payload for creating a call. </summary>
    internal partial class CreateCallRequestInternal
    {
        /// <summary> Initializes a new instance of CreateCallRequestInternal. </summary>
        /// <param name="source"> The source of the call. </param>
        /// <param name="targets"> The targets of the call. </param>
        /// <param name="callbackUri"> The callback URI. </param>
        /// <param name="requestedModalities"> The requested modalities. </param>
        /// <param name="requestedCallEvents"> The requested call events to subscribe to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="source"/>, <paramref name="targets"/>, <paramref name="callbackUri"/>, <paramref name="requestedModalities"/>, or <paramref name="requestedCallEvents"/> is null. </exception>
        public CreateCallRequestInternal(CommunicationIdentifierModel source, IEnumerable<CommunicationIdentifierModel> targets, string callbackUri, IEnumerable<CallModality> requestedModalities, IEnumerable<EventSubscritionType> requestedCallEvents)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (targets == null)
            {
                throw new ArgumentNullException(nameof(targets));
            }
            if (callbackUri == null)
            {
                throw new ArgumentNullException(nameof(callbackUri));
            }
            if (requestedModalities == null)
            {
                throw new ArgumentNullException(nameof(requestedModalities));
            }
            if (requestedCallEvents == null)
            {
                throw new ArgumentNullException(nameof(requestedCallEvents));
            }

            Source = source;
            Targets = targets.ToList();
            CallbackUri = callbackUri;
            RequestedModalities = requestedModalities.ToList();
            RequestedCallEvents = requestedCallEvents.ToList();
        }

        /// <summary> The source of the call. </summary>
        public CommunicationIdentifierModel Source { get; }
        /// <summary> The alternate identity of the source of the call if dialing out to a pstn number. </summary>
        public PhoneNumberIdentifierModel SourceAlternateIdentity { get; set; }
        /// <summary> The targets of the call. </summary>
        public IList<CommunicationIdentifierModel> Targets { get; }
        /// <summary> The subject. </summary>
        public string Subject { get; set; }
        /// <summary> The callback URI. </summary>
        public string CallbackUri { get; }
        /// <summary> The requested modalities. </summary>
        public IList<CallModality> RequestedModalities { get; }
        /// <summary> The requested call events to subscribe to. </summary>
        public IList<EventSubscritionType> RequestedCallEvents { get; }
    }
}
